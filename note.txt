
### **1️⃣ Fetch Data from Database (Controller)**
The controller retrieves the project data, including related models like `tasks` and `createdBy`:  
```php
$projects = Project::with('tasks', 'createdBy')->paginate(10);
```

### **2️⃣ Transform Data with API Resource Class**
Before sending it to the frontend, the **ProjectResource** modifies the data to match the structure you defined:
  
```php
return Inertia::render('Project/Index', [
    'projects' => ProjectResource::collection($projects)
]);

```
- `ProjectResource::collection($projects)` ensures each project follows the format in `ProjectResource.php`.  
- The **resource class** changes date formats, structures relationships (`createdBy`, `updatedBy`), and removes unnecessary fields.  


### **3️⃣ Inertia Converts Data to JSON**
Since Inertia acts as a bridge between Laravel (backend) and React (frontend):  
- It **automatically converts** the transformed data into **JSON**.  
- No need to manually return a JSON response like in traditional APIs (`return response()->json(...)`).  


### **4️⃣ Frontend Receives JSON and Displays Data**
On the React side, the `projects` prop now contains **formatted** JSON data, ready to be displayed:  
```js
export default function ProjectIndex({ projects }) {
    return (
        <div>
            {projects.data.map(project => (
                <div key={project.id}>
                    <h2>{project.name}</h2>
                    <p>{project.description}</p>
                    <p>Created by: {project.createdBy.name}</p>
                    <p>Due Date: {project.due_date}</p>
                </div>
            ))}
        </div>
    );
}
```

### **Final Summary:**  
✅ **Database fetches raw data → Controller sends to API Resource.**  
✅ **API Resource transforms & structures the data.**  
✅ **Inertia converts it into JSON and sends it to the frontend.**  
✅ **React frontend receives the JSON data and renders it.**  

🚀 **With Inertia, you don’t need to manually return JSON, Inertia does it automatically!**
